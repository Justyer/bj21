// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlackJackClient is the client API for BlackJack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlackJackClient interface {
	LogicConn(ctx context.Context, opts ...grpc.CallOption) (BlackJack_LogicConnClient, error)
}

type blackJackClient struct {
	cc grpc.ClientConnInterface
}

func NewBlackJackClient(cc grpc.ClientConnInterface) BlackJackClient {
	return &blackJackClient{cc}
}

func (c *blackJackClient) LogicConn(ctx context.Context, opts ...grpc.CallOption) (BlackJack_LogicConnClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlackJack_ServiceDesc.Streams[0], "/bj21.v1.BlackJack/LogicConn", opts...)
	if err != nil {
		return nil, err
	}
	x := &blackJackLogicConnClient{stream}
	return x, nil
}

type BlackJack_LogicConnClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type blackJackLogicConnClient struct {
	grpc.ClientStream
}

func (x *blackJackLogicConnClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blackJackLogicConnClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlackJackServer is the server API for BlackJack service.
// All implementations must embed UnimplementedBlackJackServer
// for forward compatibility
type BlackJackServer interface {
	LogicConn(BlackJack_LogicConnServer) error
	mustEmbedUnimplementedBlackJackServer()
}

// UnimplementedBlackJackServer must be embedded to have forward compatible implementations.
type UnimplementedBlackJackServer struct {
}

func (UnimplementedBlackJackServer) LogicConn(BlackJack_LogicConnServer) error {
	return status.Errorf(codes.Unimplemented, "method LogicConn not implemented")
}
func (UnimplementedBlackJackServer) mustEmbedUnimplementedBlackJackServer() {}

// UnsafeBlackJackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlackJackServer will
// result in compilation errors.
type UnsafeBlackJackServer interface {
	mustEmbedUnimplementedBlackJackServer()
}

func RegisterBlackJackServer(s grpc.ServiceRegistrar, srv BlackJackServer) {
	s.RegisterService(&BlackJack_ServiceDesc, srv)
}

func _BlackJack_LogicConn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlackJackServer).LogicConn(&blackJackLogicConnServer{stream})
}

type BlackJack_LogicConnServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type blackJackLogicConnServer struct {
	grpc.ServerStream
}

func (x *blackJackLogicConnServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blackJackLogicConnServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlackJack_ServiceDesc is the grpc.ServiceDesc for BlackJack service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlackJack_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bj21.v1.BlackJack",
	HandlerType: (*BlackJackServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LogicConn",
			Handler:       _BlackJack_LogicConn_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/bj21/v1/bj21.proto",
}
