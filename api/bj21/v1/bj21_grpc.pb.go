// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlackJackClient is the client API for BlackJack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlackJackClient interface {
	EnterRoom(ctx context.Context, in *EnterRoomRequest, opts ...grpc.CallOption) (*EnterRoomReply, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (BlackJack_ChatClient, error)
}

type blackJackClient struct {
	cc grpc.ClientConnInterface
}

func NewBlackJackClient(cc grpc.ClientConnInterface) BlackJackClient {
	return &blackJackClient{cc}
}

func (c *blackJackClient) EnterRoom(ctx context.Context, in *EnterRoomRequest, opts ...grpc.CallOption) (*EnterRoomReply, error) {
	out := new(EnterRoomReply)
	err := c.cc.Invoke(ctx, "/bj21.v1.BlackJack/EnterRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blackJackClient) Chat(ctx context.Context, opts ...grpc.CallOption) (BlackJack_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlackJack_ServiceDesc.Streams[0], "/bj21.v1.BlackJack/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &blackJackChatClient{stream}
	return x, nil
}

type BlackJack_ChatClient interface {
	Send(*ChatContent) error
	Recv() (*ChatContent, error)
	grpc.ClientStream
}

type blackJackChatClient struct {
	grpc.ClientStream
}

func (x *blackJackChatClient) Send(m *ChatContent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blackJackChatClient) Recv() (*ChatContent, error) {
	m := new(ChatContent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlackJackServer is the server API for BlackJack service.
// All implementations must embed UnimplementedBlackJackServer
// for forward compatibility
type BlackJackServer interface {
	EnterRoom(context.Context, *EnterRoomRequest) (*EnterRoomReply, error)
	Chat(BlackJack_ChatServer) error
	mustEmbedUnimplementedBlackJackServer()
}

// UnimplementedBlackJackServer must be embedded to have forward compatible implementations.
type UnimplementedBlackJackServer struct {
}

func (UnimplementedBlackJackServer) EnterRoom(context.Context, *EnterRoomRequest) (*EnterRoomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterRoom not implemented")
}
func (UnimplementedBlackJackServer) Chat(BlackJack_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedBlackJackServer) mustEmbedUnimplementedBlackJackServer() {}

// UnsafeBlackJackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlackJackServer will
// result in compilation errors.
type UnsafeBlackJackServer interface {
	mustEmbedUnimplementedBlackJackServer()
}

func RegisterBlackJackServer(s grpc.ServiceRegistrar, srv BlackJackServer) {
	s.RegisterService(&BlackJack_ServiceDesc, srv)
}

func _BlackJack_EnterRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackJackServer).EnterRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bj21.v1.BlackJack/EnterRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackJackServer).EnterRoom(ctx, req.(*EnterRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackJack_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlackJackServer).Chat(&blackJackChatServer{stream})
}

type BlackJack_ChatServer interface {
	Send(*ChatContent) error
	Recv() (*ChatContent, error)
	grpc.ServerStream
}

type blackJackChatServer struct {
	grpc.ServerStream
}

func (x *blackJackChatServer) Send(m *ChatContent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blackJackChatServer) Recv() (*ChatContent, error) {
	m := new(ChatContent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlackJack_ServiceDesc is the grpc.ServiceDesc for BlackJack service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlackJack_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bj21.v1.BlackJack",
	HandlerType: (*BlackJackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnterRoom",
			Handler:    _BlackJack_EnterRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _BlackJack_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/bj21/v1/bj21.proto",
}
